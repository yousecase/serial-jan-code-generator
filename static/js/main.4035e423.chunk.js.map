{"version":3,"sources":["JANCodeGenerator.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["JANCodeGenerator","startJANCode","quantity","isNaN","this","MAX_QUANTITY","Math","floor","mainCodePart","removeFirstDigit","firstMainCodePart","lastMainCodePart","min","MAX_MAIN_CODE_PART","getSerialNumberList","map","value","addCheckDigit","num","evenDigitSum","oddDigitSum","getFirstDigit","checkDigit","calculateCheckDigit","first","last","list","push","JANCode","JANCodeString","toFixed","length","PREFIX","substr","repeat","PropName","style","width","margin","App","props","MAX_JANCODE_Digit","state","JANCodeListString","handleChange","bind","generateSerialJANCode","e","target","name","oldJANCode","newJANCode","setState","oldQuantity","newQuantity","newQuantityInt","parseInt","getSerialJANCodeList","format","join","className","htmlFor","type","onChange","id","onClick","rows","defaultValue","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAAqBA,E,kHAUkBC,EAAsBC,GAA6B,IAAD,OACjF,GAAIC,MAAMF,IAAiBE,MAAMD,IAC7BD,EAAe,GAAKC,EAAW,GAAKE,KAAKC,aAAeH,EACxD,MAAO,GAIXD,EAAeK,KAAKC,MAAMN,GAC1BC,EAAWI,KAAKC,MAAML,GAGtB,IAAMM,EAAuBJ,KAAKK,iBAAiBR,GAG7CS,EAA4BF,EAAe,EAE3CG,EACFL,KAAKM,IAAIJ,EAAeN,EAAUE,KAAKS,oBAO3C,OAJIT,KAAKU,oBAAoBJ,EAAmBC,GAG3BI,KAAI,SAAAC,GAAK,OAAI,EAAKC,cAAcD,Q,oCAI5BE,GACzB,OAAOA,EAAM,K,uCAGeA,GAC5B,OAAOZ,KAAKC,MAAMW,EAAM,M,0CAGOV,GAK/B,IAJA,IAAIW,EAAuB,EACvBC,EAAsB,EAGnB,EAAIZ,GAEPW,GAAgBf,KAAKiB,cAAcb,GACnCA,EAAeJ,KAAKK,iBAAiBD,GAGrCY,GAAehB,KAAKiB,cAAcb,GAClCA,EAAeJ,KAAKK,iBAAiBD,GAGzC,IACMc,EAAqB,IADQ,EAAfH,EAAmBC,GACD,GAEtC,OAAmB,KAAfE,EACO,EAEJA,I,oCAGkBd,GACzB,OAAsB,GAAfA,EAAoBJ,KAAKmB,oBAAoBf,K,0CAGrBgB,EAAeC,GAE9C,IADA,IAAIC,EAAiB,GACdF,GAASC,GACZC,EAAKC,KAAKH,GACVA,IAEJ,OAAOE,I,6BAMUE,GACjB,IAAMC,EAAwBD,EAAQE,UAEtC,OAAID,EAAcE,QAAU,GAChB3B,KAAK4B,OAASH,GAAeI,QAAQ,IAErC7B,KAAK4B,OAASH,GAAeI,QAAQ,Q,KA3FpCjC,EAEOa,mBAA6B,aAFpCb,EAOOK,aAAuB,IAP9BL,EAmFOgC,OAAiB,IAAIE,OAAO,GChFxD,IAMKC,EANCC,EAA6B,CACjCC,MAAO,QACPC,OAAQ,S,SAILH,K,kBAAAA,E,oBAAAA,E,uCAAAA,M,SAiBgBI,E,YACnB,WAAYC,GAAkB,IAAD,yBAC3B,4CAAMA,KAeSC,kBAA4B,GAhBhB,EAiBZpC,aAAuB,IAjBX,MAIuCmC,EADzDL,EAASP,SAAUA,OAHD,MAGW,GAHX,IAIuCY,EADvBL,EAASjC,UAAWA,OAHpC,MAG+C,GAH/C,SAM3B,EAAKwC,OAAL,mBACGP,EAASP,QAAUA,GADtB,cAEGO,EAASjC,SAAWA,GAFvB,cAGGiC,EAASQ,kBAAoB,IAHhC,GAMA,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,sBAAwB,EAAKA,sBAAsBD,KAA3B,gBAbF,E,0EAoBRE,GACnB,OAAQA,EAAEC,OAAOC,MACf,KAAKd,EAASP,QACZ,IAAMsB,EAAqB9C,KAAKsC,MAAMP,EAASP,SAC3CuB,EAAqBJ,EAAEC,OAAOhC,MAC9BZ,KAAKqC,kBAAoBU,EAAWpB,SACtCoB,EAAaD,GAEf9C,KAAKgD,SAAL,eAAiBjB,EAASP,QAAUuB,IACpC,MAEF,KAAKhB,EAASjC,SACZ,IAAMmD,EAAsBjD,KAAKsC,MAAMP,EAASjC,UAC5CoD,EAAsBP,EAAEC,OAAOhC,MAC7BuC,EAAyBC,SAASF,IACnCnD,MAAMoD,IAAmBnD,KAAKC,aAAekD,IAChDD,EAAcD,GAEhBjD,KAAKgD,SAAL,eAAiBjB,EAASjC,SAAWoD,O,8CAOzClD,KAAKgD,SAAL,eACGjB,EAASQ,kBAGR3C,EACGyD,qBAAqBD,SAASpD,KAAKsC,MAAMP,EAASP,UACjD4B,SAASpD,KAAKsC,MAAMP,EAASjC,YAG9Ba,KAAI,SAAAC,GAAK,OAAIhB,EAAiB0D,OAAO1C,MAGrC2C,KAAK,U,+BAKZ,OACE,yBAAKC,UAAU,OAAOxB,MAAOA,GAC3B,yBAAKwB,UAAU,aACb,yBAAKA,UAAU,cACb,2BAAOC,QAAS1B,EAASP,SAAzB,WACA,2BAAOkC,KAAK,SAAS9C,MAAOZ,KAAKsC,MAAMP,EAASP,SAC9CmC,SAAU3D,KAAKwC,aAAcgB,UAAU,eACvCX,KAAMd,EAASP,QAASoC,GAAI7B,EAASP,WAEzC,yBAAKgC,UAAU,cACb,2BAAOC,QAAS1B,EAASjC,UAAzB,kBAAmDE,KAAKC,aAAxD,KACA,2BAAOyD,KAAK,SAAS9C,MAAOZ,KAAKsC,MAAMP,EAASjC,UAC9C6D,SAAU3D,KAAKwC,aAAcgB,UAAU,eACvCX,KAAMd,EAASjC,SAAU8D,GAAI7B,EAASjC,YAE1C,yBAAK0D,UAAU,cACb,4BAAQE,KAAK,SAASG,QAAS7D,KAAK0C,sBAClCc,UAAU,mBADZ,WAGF,yBAAKA,UAAU,cACb,2BAAOC,QAAQ,kBAAf,UACA,8BAAUD,UAAU,eAAeI,GAAG,iBACpCE,KAAM,GAAIC,aAAc/D,KAAKsC,MAAMP,EAASQ,4B,GArFzByB,IAAMC,WCdnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,CAAK1E,SAAS,SAAW2E,SAASC,eAAe,SDsI3D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4035e423.chunk.js","sourcesContent":["export default class JANCodeGenerator {\r\n    // JANCodeからチェックディジットを除いた部分は最大12桁\r\n    private static readonly MAX_MAIN_CODE_PART: number = 999_999_999_999;\r\n\r\n    // 配列の最大値は仕様上2^32-1(約43億)\r\n    // ブラウザにより最大値が異なり多くて6万程度\r\n    // 暫定値として100万とする\r\n    private static readonly MAX_QUANTITY: number = 1_000_000;\r\n\r\n    // startJANCodeの次のJANコードからquantity個のJANコードを生成する\r\n    public static getSerialJANCodeList(startJANCode: number, quantity: number): number[] {\r\n        if (isNaN(startJANCode) || isNaN(quantity) ||\r\n            startJANCode < 0 || quantity < 0 || this.MAX_QUANTITY < quantity) {\r\n            return [];\r\n        }\r\n\r\n        // 小数点以下を削除\r\n        startJANCode = Math.floor(startJANCode);\r\n        quantity = Math.floor(quantity);\r\n\r\n        // チェックディジット以外の部分を取得する\r\n        const mainCodePart: number = this.removeFirstDigit(startJANCode);\r\n\r\n        // 引数で指定されたstartJANCodeの次のJANから生成する\r\n        const firstMainCodePart: number = mainCodePart + 1;\r\n\r\n        const lastMainCodePart: number =\r\n            Math.min(mainCodePart + quantity, this.MAX_MAIN_CODE_PART);\r\n\r\n        const mainCodePartList: number[] =\r\n            this.getSerialNumberList(firstMainCodePart, lastMainCodePart);\r\n\r\n        const JANCodeList: number[] =\r\n            mainCodePartList.map(value => this.addCheckDigit(value));\r\n        return JANCodeList;\r\n    }\r\n\r\n    private static getFirstDigit(num: number): number {\r\n        return num % 10;\r\n    }\r\n\r\n    private static removeFirstDigit(num: number): number {\r\n        return Math.floor(num / 10);\r\n    }\r\n\r\n    private static calculateCheckDigit(mainCodePart: number): number {\r\n        let evenDigitSum: number = 0;\r\n        let oddDigitSum: number = 0;\r\n\r\n        // 偶数桁と奇数桁に分けて下の桁から加算していく\r\n        while (0 < mainCodePart) {\r\n            // 偶数桁を加算(チェックディジット削除済みのため1桁目が偶数桁になる)\r\n            evenDigitSum += this.getFirstDigit(mainCodePart);\r\n            mainCodePart = this.removeFirstDigit(mainCodePart);\r\n\r\n            // 奇数桁を加算\r\n            oddDigitSum += this.getFirstDigit(mainCodePart);\r\n            mainCodePart = this.removeFirstDigit(mainCodePart);\r\n        }\r\n\r\n        const sum: number = evenDigitSum * 3 + oddDigitSum;\r\n        const checkDigit: number = 10 - sum % 10;\r\n\r\n        if (checkDigit === 10) {\r\n            return 0;\r\n        }\r\n        return checkDigit;\r\n    }\r\n\r\n    private static addCheckDigit(mainCodePart: number): number {\r\n        return mainCodePart * 10 + this.calculateCheckDigit(mainCodePart);\r\n    }\r\n\r\n    private static getSerialNumberList(first: number, last: number): number[] {\r\n        let list: number[] = [];\r\n        while (first <= last) {\r\n            list.push(first);\r\n            first++;\r\n        }\r\n        return list;\r\n    }\r\n\r\n    // JANCodeの最低桁数の2と8桁の差の6桁分の0を先頭に追加する\r\n    private static readonly PREFIX: string = '0'.repeat(6);\r\n\r\n    public static format(JANCode: number): string {\r\n        const JANCodeString: string = JANCode.toFixed();\r\n\r\n        if (JANCodeString.length <= 8) {// 8桁以下\r\n            return (this.PREFIX + JANCodeString).substr(-8);\r\n        } else {// 9桁-13桁\r\n            return (this.PREFIX + JANCodeString).substr(-13);\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport JANCodeGenerator from './JANCodeGenerator';\r\n\r\nconst style: React.CSSProperties = {\r\n  width: '300px',\r\n  margin: '10px'\r\n};\r\n\r\n// propsとstateで利用するプロパティ名\r\nenum PropName {\r\n  JANCode = 'JANCode',\r\n  quantity = 'quantity',\r\n  JANCodeListString = 'JANCodeListString'\r\n}\r\n\r\ninterface PropType {\r\n  [PropName.JANCode]?: string;\r\n  [PropName.quantity]?: string;\r\n}\r\n\r\ninterface StateType {\r\n  [PropName.JANCode]: string;\r\n  [PropName.quantity]: string;\r\n  [PropName.JANCodeListString]: string;\r\n}\r\n\r\nexport default class App extends React.Component<PropType, StateType> {\r\n  constructor(props: PropType) {\r\n    super(props);\r\n\r\n    const { [PropName.JANCode]: JANCode = '', [PropName.quantity]: quantity = '' }:\r\n      { [PropName.JANCode]?: string, [PropName.quantity]?: string } = props;\r\n\r\n    this.state = {\r\n      [PropName.JANCode]: JANCode,\r\n      [PropName.quantity]: quantity, // TODO: 下記のMAX_QUANTITYを超える場合がある\r\n      [PropName.JANCodeListString]: ''\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.generateSerialJANCode = this.generateSerialJANCode.bind(this);\r\n  }\r\n\r\n  private readonly MAX_JANCODE_Digit: number = 13;\r\n  private readonly MAX_QUANTITY: number = 100_000; // 暫定値\r\n\r\n  // 各フォームの入力値を検証してstateに格納する\r\n  private handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\r\n    switch (e.target.name) {\r\n      case PropName.JANCode: {\r\n        const oldJANCode: string = this.state[PropName.JANCode];\r\n        let newJANCode: string = e.target.value;\r\n        if (this.MAX_JANCODE_Digit < newJANCode.length) {\r\n          newJANCode = oldJANCode;\r\n        }\r\n        this.setState({ [PropName.JANCode]: newJANCode });\r\n        break;\r\n      }\r\n      case PropName.quantity: {\r\n        const oldQuantity: string = this.state[PropName.quantity];\r\n        let newQuantity: string = e.target.value;\r\n        const newQuantityInt: number = parseInt(newQuantity);\r\n        if (!isNaN(newQuantityInt) && this.MAX_QUANTITY < newQuantityInt) {\r\n          newQuantity = oldQuantity;\r\n        }\r\n        this.setState({ [PropName.quantity]: newQuantity });\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  private generateSerialJANCode(): void {\r\n    this.setState({\r\n      [PropName.JANCodeListString]:\r\n\r\n        // JANCodeの生成\r\n        JANCodeGenerator\r\n          .getSerialJANCodeList(parseInt(this.state[PropName.JANCode]),\r\n            parseInt(this.state[PropName.quantity]))\r\n\r\n          // JANCode桁数を8桁・13桁に揃える\r\n          .map(value => JANCodeGenerator.format(value))\r\n\r\n          // 結合\r\n          .join('\\n')\r\n    });\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    return (\r\n      <div className=\"card\" style={style}>\r\n        <div className=\"card-body\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor={PropName.JANCode}>JANCode</label>\r\n            <input type=\"number\" value={this.state[PropName.JANCode]}\r\n              onChange={this.handleChange} className=\"form-control\"\r\n              name={PropName.JANCode} id={PropName.JANCode} />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor={PropName.quantity}>Quantity (Max: {this.MAX_QUANTITY})</label>\r\n            <input type=\"number\" value={this.state[PropName.quantity]}\r\n              onChange={this.handleChange} className=\"form-control\"\r\n              name={PropName.quantity} id={PropName.quantity} />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <button type=\"submit\" onClick={this.generateSerialJANCode}\r\n              className=\"btn btn-primary\">Submit</button>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"OutputTextarea\">Result</label>\r\n            <textarea className=\"form-control\" id=\"OutputTextarea\"\r\n              rows={10} defaultValue={this.state[PropName.JANCodeListString]}></textarea>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App quantity='1000' />, document.getElementById('root'));\r\nserviceWorker.unregister();"],"sourceRoot":""}